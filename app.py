import csv, json
import to_json

# LOD preparations
# Import the LOD library.
from lod import lod
# The object_manager contains every object that has been created in this Scenario so far.
object_manager = lod.get_object_manager()

def main(lod_manager):
    #
    # Get the arguments that were given to this Program.
    #
    # Each element of 'arguments' is a named object that was passed to this Program.
    # If the object is a file, that file can be opened.
    # The parameters selected by the user have been put into a single file in JSON format, so we can just read them out that way.
    # (Note that if your requirements are more complicated, you can use several input files from different sources.
    # For example, if you have two different Options that each require parameters from users, or several files that have been uploaded by the user or generated by other programs)
    arguments = lod.get_program_arguments()
    try:
        #
        # Try to open and parse data.
        #
        with open(arguments['user_parameters_file'].file, 'r') as f:
            reader = csv.DictReader(f)
            json_data = [row for row in reader]
    except:
        confidence = 1000
        description = None
        trigger = {}
        display = {
            'must_always_be_shown' : True,
            'parameter_file_name' : 'userParametersFile',
            'message_components' : [
                {
                    "text" : "The file could not be parsed. Please try again."
                }
            ],
            'buttons' : [
                {
                    'text' : "Parse to JSON",
                    'style' : 'cta',
                }
            ],
        }
        actions = [
            {
                'type' : 'execute_program',
                'program' : "Orlando_test_program",
                'arguments' : {
                    'user_parameters_file' : 'userParametersFile',
                }
            },
        ]
        existing_variables = {}
        new_option = lod.option(confidence, 'orlando_test_program_option_try_again', description, trigger, display, actions, existing_variables)
        return

    #
    # Output the result
    #
    json_file = lod.add_output_file("output.json")
    json.dump(json_data, open(json_file, 'w+'))
    # Create a simple tag connecting the file.
    # It is up to others how they want to react to this Tag.
    lod.tag('orlando_test_program_tag', arguments=[json_file])


# Execute the main() function defined above.
# We wrap the whole thing in an lod.manager().
# This ensures that the objects created above (Options, Files, Messages, Tags) are made available to Elody.
#     (The objects are not created immediately, since the program runs in an isolated environment.
#     Instead, they are all given to Elody once the Program has finished running.)
# It also creates log files from any errors or print() statements that occur, which is useful for debugging.
# To inspect these log files, you need to use the lod-executor to run the Programs locally.
with lod.manager(suppress_exceptions_after_logging_them=False, redirect_stdout_to_log=True) as lod_manager:
    main(lod_manager)
